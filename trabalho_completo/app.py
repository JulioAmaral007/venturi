"""
Simulador de Medidor de Venturi
Aplica√ß√£o web interativa desenvolvida com Streamlit

Execute com: streamlit run app.py
"""

import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
import warnings
warnings.filterwarnings('ignore')
from app_modules.simulator import VenturiSimulator
from app_modules.plots import (
    plotar_diagrama_venturi,
    plotar_manometro,
    plotar_perfil_pressao,
    plotar_linhas_energia,
)
from app_modules.examples import executar_exemplos

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Simulador de Venturi",
    page_icon="üî¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# (Defini√ß√µes de simulador, plots e exemplos foram movidas para app_modules)


def exemplo_1_comparacao_modos():
    """Exemplo 1: Compara√ß√£o entre Modo Ideal e Modo Realista"""
    st.markdown('<div style="color: white; padding: 1rem 1.5rem; margin: 0; font-weight: 600;">üîµüî¥ Exemplo 1: Compara√ß√£o Modo Ideal vs Modo Realista</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div style="background: #eff6ff; color: #000000; border-left: 4px solid #2563eb; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
    Este exemplo compara o comportamento do medidor de Venturi em duas condi√ß√µes:<br>
    ‚Ä¢ <strong>Modo Ideal</strong>: Escoamento sem perdas (Cd = 1.0, sem atrito)<br>
    ‚Ä¢ <strong>Modo Realista</strong>: Escoamento com perdas por atrito e coeficiente de descarga real
    </div>
    """, unsafe_allow_html=True)
    
    # Par√¢metros comuns
    D1 = 0.10  # m
    D2 = 0.05  # m
    Q = 0.015  # m¬≥/s
    
    # Modo Ideal
    sim_ideal = VenturiSimulator()
    sim_ideal.calcular(D1, D2, 1.0, 1000, 13600, Q, 0, 0.02, 1.0, 'Ideal')
    
    # Modo Realista
    sim_real = VenturiSimulator()
    sim_real.calcular(D1, D2, 1.0, 1000, 13600, Q, 0, 0.025, 0.96, 'Realista')
    
    # Mostrar resultados lado a lado
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üîµ Modo Ideal")
        st.metric("Velocidade v‚ÇÅ", f"{sim_ideal.v1:.3f} m/s")
        st.metric("Velocidade v‚ÇÇ", f"{sim_ideal.v2:.3f} m/s")
        st.metric("Queda de Press√£o ŒîP", f"{sim_ideal.delta_P/1000:.3f} kPa")
        st.metric("Desn√≠vel Œîh", f"{sim_ideal.delta_h*100:.2f} cm")
        st.metric("Perda de Carga h‚Çó", f"{sim_ideal.h_L:.6f} m", "zero")
    
    with col2:
        st.markdown("### üî¥ Modo Realista")
        st.metric("Velocidade v‚ÇÅ", f"{sim_real.v1:.3f} m/s")
        st.metric("Velocidade v‚ÇÇ", f"{sim_real.v2:.3f} m/s")
        st.metric("Queda de Press√£o ŒîP", f"{sim_real.delta_P/1000:.3f} kPa")
        st.metric("Desn√≠vel Œîh", f"{sim_real.delta_h*100:.2f} cm")
        st.metric("Perda de Carga h‚Çó", f"{sim_real.h_L:.6f} m", "com perdas")
    
    # An√°lise das diferen√ßas
    st.markdown("---")
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">üìä An√°lise das Diferen√ßas</div>', unsafe_allow_html=True)
    
    diff_p = ((sim_real.delta_P - sim_ideal.delta_P) / sim_ideal.delta_P) * 100
    diff_h = ((sim_real.delta_h - sim_ideal.delta_h) / sim_ideal.delta_h) * 100
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Aumento em ŒîP", f"{diff_p:.2f}%")
    with col2:
        st.metric("Aumento em Œîh", f"{diff_h:.2f}%")
    with col3:
        st.metric("Perda de Energia", f"{sim_real.h_L:.6f} m")
    
    # Gr√°ficos comparativos
    st.markdown("---")
    st.markdown("### üìà Visualiza√ß√µes Comparativas")
    
    tab1, tab2 = st.tabs(["Perfil de Press√£o", "Linhas de Energia"])
    
    with tab1:
        fig = plotar_perfil_pressao(sim_real)
        st.pyplot(fig)
        plt.close(fig)
    
    with tab2:
        fig = plotar_linhas_energia(sim_real)
        st.pyplot(fig)
        plt.close(fig)


def exemplo_2_curva_calibracao():
    """Exemplo 2: Gera√ß√£o de Curva de Calibra√ß√£o"""
    st.markdown('<div style="color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">üìà Exemplo 2: Curva de Calibra√ß√£o do Medidor</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div style="background: #eff6ff; color: #000000; border-left: 4px solid #2563eb; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
    Este exemplo gera uma <strong>curva de calibra√ß√£o</strong> relacionando a vaz√£o volum√©trica (Q) 
    com o desn√≠vel manom√©trico (Œîh) para um medidor de Venturi espec√≠fico.
    </div>
    """, unsafe_allow_html=True)
    
    # Criar simulador
    sim = VenturiSimulator()
    
    # Faixa de vaz√µes
    vazoes = np.linspace(0.005, 0.030, 20)  # m¬≥/s
    desniveis = []
    pressoes = []
    reynolds = []
    
    # Calcular pontos da curva
    with st.spinner('Gerando curva de calibra√ß√£o...'):
        for q in vazoes:
            sim.calcular(0.10, 0.05, 1.0, 1000, 13600, q, 0, 0.02, 0.97, 'Realista')
            desniveis.append(sim.delta_h * 100)  # cm
            pressoes.append(sim.delta_P / 1000)   # kPa
            reynolds.append(sim.calcular_reynolds())
    
    # Resumo da calibra√ß√£o
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 1.5rem 0 1rem 0; font-weight: 600;">üìä Resumo da Calibra√ß√£o</div>', unsafe_allow_html=True)
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Faixa de Vaz√£o", f"{vazoes[0]*1000:.1f} - {vazoes[-1]*1000:.1f} L/s")
    with col2:
        st.metric("Faixa de Desn√≠vel", f"{desniveis[0]:.2f} - {desniveis[-1]:.2f} cm")
    with col3:
        st.metric("Faixa de ŒîP", f"{pressoes[0]:.2f} - {pressoes[-1]:.2f} kPa")
    
    # Tabela de dados
    st.markdown("---")
    st.markdown("### üìã Tabela de Calibra√ß√£o")
    
    import pandas as pd
    df = pd.DataFrame({
        'Q (L/s)': [q*1000 for q in vazoes],
        'Q (m¬≥/h)': [q*3600 for q in vazoes],
        'Œîh (cm)': desniveis,
        'ŒîP (kPa)': pressoes,
        'Reynolds': [int(re) for re in reynolds]
    })
    
    st.dataframe(df.style.format({
        'Q (L/s)': '{:.2f}',
        'Q (m¬≥/h)': '{:.2f}',
        'Œîh (cm)': '{:.2f}',
        'ŒîP (kPa)': '{:.3f}',
        'Reynolds': '{:,.0f}'
    }), width='stretch')
    
    # Gr√°fico da curva de calibra√ß√£o
    st.markdown("---")
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">üìà Curva de Calibra√ß√£o</div>', unsafe_allow_html=True)
    
    fig, ax = plt.subplots(figsize=(10, 6), facecolor='white')
    ax.set_facecolor('white')
    ax.plot(np.array(vazoes) * 1000, desniveis, 'o-', color='#2563eb', 
            linewidth=2.5, markersize=8, markeredgecolor='white', markeredgewidth=2)
    ax.set_xlabel('Vaz√£o (L/s)', fontsize=12, fontweight='bold', color='#000000')
    ax.set_ylabel('Desn√≠vel Manom√©trico Œîh (cm)', fontsize=12, fontweight='bold', color='#000000')
    ax.set_title('Curva de Calibra√ß√£o do Medidor de Venturi', fontsize=14, 
                 fontweight='bold', color='#000000', pad=15)
    ax.grid(True, alpha=0.2, linestyle='--', linewidth=1)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    plt.tight_layout()
    
    st.pyplot(fig)
    plt.close(fig)
    
    st.markdown('<div style="background: #f0fdf4; color: #000000; border-left: 4px solid #10b981; padding: 1rem; border-radius: 8px; margin: 1rem 0;">‚úÖ A curva mostra a rela√ß√£o quadr√°tica entre vaz√£o e desn√≠vel: <strong>Q ‚àù ‚àö(Œîh)</strong></div>', unsafe_allow_html=True)


def exemplo_3_modo_medidor():
    """Exemplo 3: Uso do Modo Medidor (calcular vaz√£o a partir de Œîh)"""
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">üî¨ Exemplo 3: Modo Medidor - Calcular Vaz√£o a partir de Œîh</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div style="background: #eff6ff; color: #000000; border-left: 4px solid #2563eb; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
    Este exemplo demonstra o uso <strong>pr√°tico</strong> do medidor de Venturi: 
    medir o desn√≠vel manom√©trico (Œîh) e calcular a vaz√£o (Q) correspondente.
    </div>
    """, unsafe_allow_html=True)
    
    # Criar simulador
    sim = VenturiSimulator()
    
    # Diferentes desn√≠veis
    desniveis = [0.05, 0.10, 0.15, 0.20, 0.25]  # m
    resultados = []
    
    for dh in desniveis:
        sim.calcular(0.10, 0.05, 1.0, 1000, 13600, 0, dh, 0.02, 0.98, 'Medidor')
        resultados.append({
            'Œîh (cm)': dh * 100,
            'Q (L/s)': sim.Q * 1000,
            'Q (m¬≥/h)': sim.Q * 3600,
            'v‚ÇÅ (m/s)': sim.v1,
            'v‚ÇÇ (m/s)': sim.v2,
            'ŒîP (kPa)': sim.delta_P / 1000
        })
    
    # Tabela de resultados
    st.markdown("### üìã Resultados para Diferentes Desn√≠veis")
    
    import pandas as pd
    df = pd.DataFrame(resultados)
    
    st.dataframe(df.style.format({
        'Œîh (cm)': '{:.1f}',
        'Q (L/s)': '{:.2f}',
        'Q (m¬≥/h)': '{:.2f}',
        'v‚ÇÅ (m/s)': '{:.3f}',
        'v‚ÇÇ (m/s)': '{:.3f}',
        'ŒîP (kPa)': '{:.3f}'
    }), width='stretch')
    
    # Gr√°fico Q vs Œîh
    st.markdown("---")
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">üìà Rela√ß√£o Q = f(‚àöŒîh)</div>', unsafe_allow_html=True)
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5))
    
    # Gr√°fico 1: Q vs Œîh
    ax1.set_facecolor('white')
    ax1.plot(df['Œîh (cm)'], df['Q (L/s)'], 'o-', color='#ef4444', 
             linewidth=2.5, markersize=8, markeredgecolor='white', markeredgewidth=2)
    ax1.set_xlabel('Desn√≠vel Manom√©trico Œîh (cm)', fontsize=11, fontweight='bold', color='#000000')
    ax1.set_ylabel('Vaz√£o Q (L/s)', fontsize=11, fontweight='bold', color='#000000')
    ax1.set_title('Vaz√£o vs Desn√≠vel', fontsize=12, fontweight='bold', color='#000000', pad=15)
    ax1.grid(True, alpha=0.2, linestyle='--', linewidth=1)
    ax1.spines['top'].set_visible(False)
    ax1.spines['right'].set_visible(False)
    
    # Gr√°fico 2: Q vs ‚àöŒîh (deve ser linear)
    ax2.set_facecolor('white')
    ax2.plot(np.sqrt(df['Œîh (cm)']), df['Q (L/s)'], 'o-', color='#2563eb', 
             linewidth=2.5, markersize=8, markeredgecolor='white', markeredgewidth=2)
    ax2.set_xlabel('‚àö(Œîh) [‚àöcm]', fontsize=11, fontweight='bold', color='#000000')
    ax2.set_ylabel('Vaz√£o Q (L/s)', fontsize=11, fontweight='bold', color='#000000')
    ax2.set_title('Vaz√£o vs ‚àöDesn√≠vel (Rela√ß√£o Linear)', fontsize=12, fontweight='bold', 
                  color='#000000', pad=15)
    ax2.grid(True, alpha=0.2, linestyle='--', linewidth=1)
    ax2.spines['top'].set_visible(False)
    ax2.spines['right'].set_visible(False)
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close(fig)
    
    # Observa√ß√£o importante
    st.markdown("""
    <div style="background: #eff6ff; color: #000000; border-left: 4px solid #2563eb; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
    üí° <strong>Observa√ß√£o Importante:</strong><br>
    ‚Ä¢ A vaz√£o √© proporcional √† raiz quadrada do desn√≠vel: <strong>Q ‚àù ‚àö(Œîh)</strong><br>
    ‚Ä¢ Dobrando Œîh, a vaz√£o aumenta por um fator de ‚àö2 ‚âà 1.41<br>
    ‚Ä¢ O gr√°fico Q vs ‚àö(Œîh) √© aproximadamente linear
    </div>
    """, unsafe_allow_html=True)


def exemplo_4_sensibilidade_cd():
    """Exemplo 4: An√°lise de Sensibilidade ao Coeficiente de Descarga"""
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">‚öôÔ∏è Exemplo 4: Sensibilidade ao Coeficiente de Descarga (Cd)</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div style="background: #eff6ff; color: #000000; border-left: 4px solid #2563eb; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
    Este exemplo analisa como o <strong>coeficiente de descarga (Cd)</strong> afeta as medi√ß√µes de vaz√£o.
    O Cd leva em conta perdas e efeitos n√£o ideais no escoamento.
    </div>
    """, unsafe_allow_html=True)
    
    # Criar simulador
    sim = VenturiSimulator()
    
    # Diferentes valores de Cd
    cd_values = np.linspace(0.90, 1.00, 11)
    resultados = []
    
    q_referencia = None
    
    for cd in cd_values:
        sim.calcular(0.10, 0.05, 1.0, 1000, 13600, 0, 0.15, 0.02, cd, 'Medidor')
        
        if q_referencia is None:
            q_referencia = sim.Q * 1000
            variacao = 0
        else:
            variacao = ((sim.Q * 1000 - q_referencia) / q_referencia) * 100
        
        resultados.append({
            'Cd': cd,
            'Q (L/s)': sim.Q * 1000,
            'Varia√ß√£o (%)': variacao,
            'ŒîP (kPa)': sim.delta_P / 1000
        })
    
    # Tabela de resultados
    st.markdown("### üìã Efeito de Cd na Vaz√£o (Œîh fixo = 15 cm)")
    
    import pandas as pd
    df = pd.DataFrame(resultados)
    
    st.dataframe(df.style.format({
        'Cd': '{:.2f}',
        'Q (L/s)': '{:.3f}',
        'Varia√ß√£o (%)': '{:.2f}',
        'ŒîP (kPa)': '{:.3f}'
    }), width='stretch')
    
    # An√°lise estat√≠stica
    st.markdown("---")
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">üìä An√°lise Estat√≠stica</div>', unsafe_allow_html=True)
    
    vazao_min = df['Q (L/s)'].min()
    vazao_max = df['Q (L/s)'].max()
    variacao_total = ((vazao_max - vazao_min) / vazao_min) * 100
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Vaz√£o M√≠nima (Cd=0.90)", f"{vazao_min:.3f} L/s")
    with col2:
        st.metric("Vaz√£o M√°xima (Cd=1.00)", f"{vazao_max:.3f} L/s")
    with col3:
        st.metric("Varia√ß√£o Total", f"{variacao_total:.1f}%")
    
    # Gr√°fico
    st.markdown("---")
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">üìà Visualiza√ß√£o do Efeito de Cd</div>', unsafe_allow_html=True)
    
    fig, ax = plt.subplots(figsize=(10, 6), facecolor='white')
    ax.set_facecolor('white')
    ax.plot(df['Cd'], df['Q (L/s)'], 'o-', color='#10b981', 
            linewidth=2.5, markersize=8, markeredgecolor='white', markeredgewidth=2)
    ax.set_xlabel('Coeficiente de Descarga (Cd)', fontsize=12, fontweight='bold', color='#000000')
    ax.set_ylabel('Vaz√£o Q (L/s)', fontsize=12, fontweight='bold', color='#000000')
    ax.set_title('Sensibilidade da Vaz√£o ao Coeficiente Cd', fontsize=14, fontweight='bold', 
                 color='#000000', pad=15)
    ax.grid(True, alpha=0.2, linestyle='--', linewidth=1)
    ax.axhline(y=vazao_min, color='#ef4444', linestyle='--', alpha=0.5, linewidth=1.5,
               label=f'Q m√≠n = {vazao_min:.3f} L/s')
    ax.axhline(y=vazao_max, color='#10b981', linestyle='--', alpha=0.5, linewidth=1.5,
               label=f'Q m√°x = {vazao_max:.3f} L/s')
    ax.legend(frameon=True, fancybox=True, shadow=True)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    plt.tight_layout()
    
    st.pyplot(fig)
    plt.close(fig)
    
    # Alerta importante
    st.markdown(f"""
    <div style="background: #fffbeb; color: #000000; border-left: 4px solid #f59e0b; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
    ‚ö†Ô∏è <strong>IMPORTANTE:</strong><br>
    ‚Ä¢ Uma varia√ß√£o de 10% em Cd causa <strong>{variacao_total:.1f}%</strong> de varia√ß√£o na vaz√£o!<br>
    ‚Ä¢ √â crucial ter um Cd preciso para medi√ß√µes confi√°veis<br>
    ‚Ä¢ O Cd t√≠pico para Venturi varia entre 0.95 e 0.98<br>
    ‚Ä¢ O Cd depende do n√∫mero de Reynolds e da geometria do medidor
    </div>
    """, unsafe_allow_html=True)


def exemplo_5_efeito_beta():
    """Exemplo 5: Efeito da Raz√£o Beta (Œ≤ = D‚ÇÇ/D‚ÇÅ)"""
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">üìê Exemplo 5: Efeito da Raz√£o Beta (Œ≤ = D‚ÇÇ/D‚ÇÅ)</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div style="background: #eff6ff; color: #000000; border-left: 4px solid #2563eb; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
    Este exemplo analisa como a <strong>raz√£o de di√¢metros Œ≤</strong> afeta o desempenho do medidor.
    Œ≤ √© a raz√£o entre o di√¢metro da garganta (D‚ÇÇ) e o di√¢metro de entrada (D‚ÇÅ).
    </div>
    """, unsafe_allow_html=True)
    
    # Par√¢metros fixos
    D1 = 0.10  # m
    Q = 0.015  # m¬≥/s (fixo)
    
    # Diferentes valores de D2 (Œ≤)
    beta_values = np.linspace(0.3, 0.7, 9)
    resultados = []
    
    for beta in beta_values:
        D2 = beta * D1
        
        sim = VenturiSimulator()
        sim.calcular(D1, D2, 1.0, 1000, 13600, Q, 0, 0.02, 1.0, 'Ideal')
        
        resultados.append({
            'Œ≤': beta,
            'D‚ÇÇ (cm)': D2 * 100,
            'Œîh (cm)': sim.delta_h * 100,
            'ŒîP (kPa)': sim.delta_P / 1000,
            'v‚ÇÇ (m/s)': sim.v2,
            'v‚ÇÇ/v‚ÇÅ': sim.v2 / sim.v1
        })
    
    # Tabela de resultados
    st.markdown(f"### üìã Efeito de Œ≤ (D‚ÇÅ={D1*100:.0f} cm, Q={Q*1000:.0f} L/s fixo)")
    
    import pandas as pd
    df = pd.DataFrame(resultados)
    
    st.dataframe(df.style.format({
        'Œ≤': '{:.2f}',
        'D‚ÇÇ (cm)': '{:.2f}',
        'Œîh (cm)': '{:.2f}',
        'ŒîP (kPa)': '{:.2f}',
        'v‚ÇÇ (m/s)': '{:.2f}',
        'v‚ÇÇ/v‚ÇÅ': '{:.2f}'
    }), width='stretch')
    
    # Gr√°ficos
    st.markdown("---")
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">üìà Visualiza√ß√µes do Efeito de Œ≤</div>', unsafe_allow_html=True)
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 5))
    
    # Gr√°fico 1: Œîh vs Œ≤
    ax1.set_facecolor('white')
    ax1.plot(df['Œ≤'], df['Œîh (cm)'], 'o-', color='#ef4444', 
             linewidth=2.5, markersize=8, markeredgecolor='white', markeredgewidth=2)
    ax1.set_xlabel('Raz√£o Œ≤ = D‚ÇÇ/D‚ÇÅ', fontsize=11, fontweight='bold', color='#000000')
    ax1.set_ylabel('Desn√≠vel Œîh (cm)', fontsize=11, fontweight='bold', color='#000000')
    ax1.set_title('Desn√≠vel vs Raz√£o Beta', fontsize=12, fontweight='bold', color='#000000', pad=15)
    ax1.grid(True, alpha=0.2, linestyle='--', linewidth=1)
    ax1.axvspan(0.4, 0.7, alpha=0.2, color='#10b981', label='Faixa t√≠pica')
    ax1.legend(frameon=True, fancybox=True, shadow=True)
    ax1.spines['top'].set_visible(False)
    ax1.spines['right'].set_visible(False)
    
    # Gr√°fico 2: v‚ÇÇ vs Œ≤
    ax2.set_facecolor('white')
    ax2.plot(df['Œ≤'], df['v‚ÇÇ (m/s)'], 'o-', color='#2563eb', 
             linewidth=2.5, markersize=8, markeredgecolor='white', markeredgewidth=2)
    ax2.set_xlabel('Raz√£o Œ≤ = D‚ÇÇ/D‚ÇÅ', fontsize=11, fontweight='bold', color='#000000')
    ax2.set_ylabel('Velocidade na garganta v‚ÇÇ (m/s)', fontsize=11, fontweight='bold', color='#000000')
    ax2.set_title('Velocidade vs Raz√£o Beta', fontsize=12, fontweight='bold', color='#000000', pad=15)
    ax2.grid(True, alpha=0.2, linestyle='--', linewidth=1)
    ax2.axvspan(0.4, 0.7, alpha=0.2, color='#10b981', label='Faixa t√≠pica')
    ax2.legend(frameon=True, fancybox=True, shadow=True)
    ax2.spines['top'].set_visible(False)
    ax2.spines['right'].set_visible(False)
    
    plt.tight_layout()
    st.pyplot(fig)
    plt.close(fig)
    
    # Observa√ß√µes
    st.markdown("---")
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">üìä Observa√ß√µes Importantes</div>', unsafe_allow_html=True)
    
    st.markdown("""
    <div style="background: #eff6ff; color: #000000; border-left: 4px solid #2563eb; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
    <strong>Efeitos da Raz√£o Beta:</strong><br><br>
    
    ‚Ä¢ <strong>Menor Œ≤</strong> (garganta mais estreita):<br>
      &nbsp;&nbsp;‚úÖ Maior velocidade na garganta<br>
      &nbsp;&nbsp;‚úÖ Maior queda de press√£o (maior sensibilidade)<br>
      &nbsp;&nbsp;‚ùå Maior perda de carga permanente<br><br>
    
    ‚Ä¢ <strong>Maior Œ≤</strong> (garganta mais larga):<br>
      &nbsp;&nbsp;‚úÖ Menor perda de carga<br>
      &nbsp;&nbsp;‚ùå Menor queda de press√£o (menor sensibilidade)<br>
      &nbsp;&nbsp;‚ùå Menor velocidade na garganta<br><br>
    
    ‚Ä¢ <strong>Œ≤ t√≠pico para Venturi</strong>: 0.4 - 0.7<br>
    ‚Ä¢ <strong>Compromisso</strong>: Sensibilidade vs Perda de Carga
    </div>
    """, unsafe_allow_html=True)


# ========== INTERFACE STREAMLIT ==========

def main():
    # Sidebar com controles
    st.sidebar.header("‚öôÔ∏è Par√¢metros de Controle")
    
    # Seletor de modo (Simula√ß√£o ou Exemplos)
    st.sidebar.subheader("üéØ Modo de Opera√ß√£o")
    app_mode = st.sidebar.radio(
        "Escolha o modo:",
        options=['Simula√ß√£o Interativa', 'Exemplos Pr√°ticos'],
        help="Simula√ß√£o: configure par√¢metros manualmente | Exemplos: veja casos pr√©-configurados"
    )
    
    # Se modo Exemplos foi selecionado
    if app_mode == 'Exemplos Pr√°ticos':
        executar_exemplos()
        return
    
    # T√≠tulo principal (apenas no modo Simula√ß√£o Interativa)
    st.markdown("""
    <div style="background: linear-gradient(135deg, #2563eb 0%, #0ea5e9 100%); padding: 2rem; border-radius: 12px; margin-bottom: 2rem; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
        <h1 style="color: white; margin: 0; font-size: 2rem; font-weight: 700;">üî¨ Simulador Interativo de Medidor de Venturi</h1>
        <p style="color: rgba(255, 255, 0, 1); margin: 0.5rem 0 0 0; font-size: 1.1rem;">Ferramenta avan√ßada para an√°lise de escoamento em medidores de Venturi</p>
    </div>
    """, unsafe_allow_html=True)

    # Continuar com simula√ß√£o interativa
    mode = st.sidebar.radio(
        "Tipo de simula√ß√£o:",
        options=['Ideal', 'Realista', 'Medidor'],
        help="Ideal: sem perdas | Realista: com perdas | Medidor: calcula Q a partir de Œîh"
    )
    
    st.sidebar.markdown("---")
    
    # Par√¢metros geom√©tricos
    st.sidebar.subheader("üìê Geometria")
    D1 = st.sidebar.slider("D‚ÇÅ - Di√¢metro de entrada (m)", 0.05, 0.30, 0.10, 0.01)
    D2 = st.sidebar.slider("D‚ÇÇ - Di√¢metro da garganta (m)", 0.02, 0.15, 0.05, 0.01)
    L = st.sidebar.slider("L - Comprimento total (m)", 0.5, 3.0, 1.0, 0.1)
    
    st.sidebar.markdown("---")
    
    # Propriedades dos fluidos
    st.sidebar.subheader("üíß Propriedades dos Fluidos")
    rho = st.sidebar.slider("œÅ - Densidade do fluido (kg/m¬≥)", 500, 2000, 1000, 50)
    rho_m = st.sidebar.slider("œÅ‚Çò - Densidade manom√©trica (kg/m¬≥)", 10000, 15000, 13600, 100)
    
    st.sidebar.markdown("---")
    
    # Condi√ß√µes de escoamento
    st.sidebar.subheader("üåä Condi√ß√µes de Escoamento")
    
    if mode == 'Medidor':
        delta_h = st.sidebar.slider("Œîh - Desn√≠vel manom√©trico (m)", 0.01, 0.5, 0.1, 0.01)
        Q = None  # Ser√° calculado
    else:
        Q = st.sidebar.slider("Q - Vaz√£o volum√©trica (m¬≥/s)", 0.001, 0.05, 0.01, 0.001)
        delta_h = None  # Ser√° calculado
    
    st.sidebar.markdown("---")
    
    # Par√¢metros avan√ßados
    st.sidebar.subheader("üîß Par√¢metros Avan√ßados")
    f = st.sidebar.slider("f - Coeficiente de atrito", 0.01, 0.10, 0.02, 0.005)
    Cd = st.sidebar.slider("Cd - Coeficiente de descarga", 0.90, 1.00, 0.98, 0.01)
    
    # Valida√ß√£o
    if D2 >= D1:
        st.error("‚ö†Ô∏è ERRO: D‚ÇÇ deve ser menor que D‚ÇÅ!")
        return
    
    # Criar simulador e calcular
    sim = VenturiSimulator()
    sim.calcular(D1, D2, L, rho, rho_m, Q if Q else 0, delta_h if delta_h else 0, f, Cd, mode)
    
    # ========== LAYOUT PRINCIPAL ==========
    
    # M√©tricas principais
    st.markdown('<div style="background: linear-gradient(90deg, #2563eb 0%, #0ea5e9 100%); color: white; padding: 1rem 1.5rem; border-radius: 8px; margin: 0 0 1rem 0; font-weight: 600;">üìä Resultados Principais</div>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Vaz√£o Q", f"{sim.Q*1000:.2f} L/s", f"{sim.Q*3600:.1f} m¬≥/h")
    
    with col2:
        st.metric("Desn√≠vel Œîh", f"{sim.delta_h*100:.2f} cm", f"{sim.delta_h:.4f} m")
    
    with col3:
        st.metric("Velocidade v‚ÇÅ", f"{sim.v1:.3f} m/s")
    
    with col4:
        st.metric("Velocidade v‚ÇÇ", f"{sim.v2:.3f} m/s")
    
    st.markdown("---")
    
    # Abas para organizar visualiza√ß√µes
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìê Diagrama", "üî¨ Man√¥metro", "üìà Press√£o", "‚ö° Energia", "üìã Resultados Completos"
    ])
    
    with tab1:
        st.subheader("Diagrama Esquem√°tico do Venturi")
        fig = plotar_diagrama_venturi(sim)
        st.pyplot(fig)
        plt.close(fig)
    
    with tab2:
        st.subheader("Man√¥metro Diferencial em U")
        fig = plotar_manometro(sim)
        st.pyplot(fig)
        plt.close(fig)
    
    with tab3:
        st.subheader("Perfil de Press√£o ao Longo do Tubo")
        fig = plotar_perfil_pressao(sim)
        st.pyplot(fig)
        plt.close(fig)
    
    with tab4:
        st.subheader("Linhas de Energia e Piezom√©trica")
        fig = plotar_linhas_energia(sim)
        st.pyplot(fig)
        plt.close(fig)
    
    with tab5:
        st.subheader("Resultados Num√©ricos Completos")
        
        Re = sim.calcular_reynolds()
        
        col_a, col_b = st.columns(2)
        
        with col_a:
            st.markdown("**GEOMETRIA:**")
            st.write(f"‚Ä¢ D‚ÇÅ = {sim.D1:.3f} m")
            st.write(f"‚Ä¢ D‚ÇÇ = {sim.D2:.3f} m")
            st.write(f"‚Ä¢ A‚ÇÅ = {sim.A1:.6f} m¬≤")
            st.write(f"‚Ä¢ A‚ÇÇ = {sim.A2:.6f} m¬≤")
            st.write(f"‚Ä¢ Œ≤ = D‚ÇÇ/D‚ÇÅ = {sim.D2/sim.D1:.3f}")
            
            st.markdown("")
            st.markdown("**PROPRIEDADES:**")
            st.write(f"‚Ä¢ œÅ (fluido) = {sim.rho:.0f} kg/m¬≥")
            st.write(f"‚Ä¢ œÅ‚Çò (manom√©trico) = {sim.rho_m:.0f} kg/m¬≥")
            
            st.markdown("")
            st.markdown("**VELOCIDADES:**")
            st.write(f"‚Ä¢ v‚ÇÅ = {sim.v1:.3f} m/s")
            st.write(f"‚Ä¢ v‚ÇÇ = {sim.v2:.3f} m/s")
            st.write(f"‚Ä¢ Raz√£o v‚ÇÇ/v‚ÇÅ = {sim.v2/sim.v1:.2f}")
        
        with col_b:
            st.markdown("**PRESS√ïES:**")
            st.write(f"‚Ä¢ P‚ÇÅ = {sim.P1/1000:.2f} kPa")
            st.write(f"‚Ä¢ P‚ÇÇ = {sim.P2/1000:.2f} kPa")
            st.write(f"‚Ä¢ ŒîP = {sim.delta_P/1000:.3f} kPa")
            
            st.markdown("")
            st.markdown("**MEDI√á√ïES:**")
            st.write(f"‚Ä¢ Vaz√£o Q = {sim.Q*1000:.2f} L/s ({sim.Q*3600:.2f} m¬≥/h)")
            st.write(f"‚Ä¢ Œîh (man√¥metro) = {sim.delta_h*100:.2f} cm")
            st.write(f"‚Ä¢ Reynolds = {Re:.0f}")
            
            st.markdown("")
            st.markdown("**ENERGIA:**")
            st.write(f"‚Ä¢ Carga cin√©tica (1) = {sim.v1**2/(2*sim.g):.4f} m")
            st.write(f"‚Ä¢ Carga cin√©tica (2) = {sim.v2**2/(2*sim.g):.4f} m")
            st.write(f"‚Ä¢ Perda de carga h‚Çó = {sim.h_L:.4f} m")
        
        # Indicador de regime
        st.markdown("---")
        if Re < 2300:
            st.markdown('<div style="background: #fffbeb; color: #000000; border-left: 4px solid #f59e0b; padding: 1rem; border-radius: 8px; margin: 1rem 0;">‚ö†Ô∏è <strong>Regime LAMINAR</strong> (Re < 2300)</div>', unsafe_allow_html=True)
        elif Re < 4000:
            st.markdown('<div style="background: #eff6ff; color: #000000; border-left: 4px solid #2563eb; padding: 1rem; border-radius: 8px; margin: 1rem 0;">üîÑ <strong>Regime de TRANSI√á√ÉO</strong> (2300 < Re < 4000)</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div style="background: #f0fdf4; color: #000000; border-left: 4px solid #10b981; padding: 1rem; border-radius: 8px; margin: 1rem 0;">‚úÖ <strong>Regime TURBULENTO</strong> (Re > 4000)</div>', unsafe_allow_html=True)
    
    # Rodap√©
    st.markdown("""
    <div style="text-align: center; padding: 2rem; color: #64748b; border-top: 1px solid #e2e8f0; margin-top: 3rem;">
        <p><strong>üî¨ Simulador de Medidor de Venturi</strong></p>
        <p>Desenvolvido com Streamlit + Python | Modo: {}</p>
    </div>
    """.format(mode), unsafe_allow_html=True)


if __name__ == "__main__":
    main()

